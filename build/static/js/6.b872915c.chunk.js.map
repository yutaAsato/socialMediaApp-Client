{"version":3,"sources":["assets/svg/color.svg","assets/svg/black.svg","assets/svg/fighter.svg","utils/tweets.js","utils/notifications.js","components/LikeButton.js","components/Comments.js","utils/image.js","components/Tweets.js","components/HomeTweets.js","components/HomePostTweet.js","components/Home.js","components/DeleteButton.js","utils/comments.js","components/TweetDetails.js","components/EditProfile.js","utils/uploadImage.js","components/UserProfile.js","components/FollowButton.js","components/Relevant.js","components/whoToFollowFollowButton.js","components/WhoToFollow.js","components/SideBar.js","AuthenticatedApp.js"],"names":["module","exports","config","staleTime","cacheTime","useTweets","endPoint","dt","client","useClient","useQuery","queryKey","queryFn","then","data","useHomeTweets","method","useNotifications","useMutation","updates","LikeButton","props","loggedUser","useUser","followTweets","useLike","like","unlike","postNotification","user","tweetUsername","postId","tweetId","undefined","likes","length","map","tweetid","find","x","likedPost","Tooltip","title","onClick","IconButton","sender","username","recipient","type","useStyles","makeStyles","theme","dialogContainer","width","Comments","usePostComment","postComment","classes","dayjs","extend","relativeTime","React","useContext","UserContext","state","useState","open","setOpen","reply","setReply","handleClose","filteredTweets","markup","profilePic","Date","now","url","userTweets","filter","id","parseInt","tweets","Card","className","root","CardHeader","avatar","Avatar","alt","src","style","objectFit","subheader","created_at","fromNow","CardContent","Typography","variant","color","component","content","CardActions","disableSpacing","aria-label","Dialog","fullWidth","maxWidth","onClose","aria-labelledby","DialogTitle","DialogContent","TextField","autoFocus","margin","placeholder","onChange","e","target","value","DialogActions","Button","comment","useImage","backgroundColor","inline","display","padding","paddingLeft","paddingBottom","Tweets","orderedTweets","tweetsMarkup","sort","a","b","dateA","tweet","TweetsCard","key","to","textDecoration","fontSize","marginRight","Fragment","Container","justifyContent","marginLeft","Box","likescount","commentcount","Divider","HomeTweets","isLoading","paddingTop","palette","primary","main","height","textField","marginTop","spacing","postButton","breakpoints","down","marginBottom","HomePostTweet","usePostTweet","postTweet","console","log","setTweet","ListItem","Home","useParams","fontWeight","require","light","DeleteButton","history","useHistory","currentTweetId","axios","post","deletePost","push","media","expand","transform","transition","transitions","create","duration","shortest","expandOpen","red","TweetDetails","urlUser","relationships","notifications","useComments","comments","isFetchedAfterMount","tweetDetails","commentSection","match","params","currentTweetUsername","List","alignItems","paddingRight","senderusername","ListItemText","secondary","editProfile","overflowY","EditProfile","image","token","localStorage","jwt","window","fetch","body","headers","Authorization","onSettled","queryCache","invalidateQueries","useUpload","uploadImage","useEditDetails","editDetails","bio","setBio","website","setWebsite","location","setLocation","useEffect","name","hidden","event","files","formData","FormData","append","placement","document","getElementById","click","label","defaultValue","UserProfile","followers","following","currentUser","relevantTweets","relevantUsername","useRelevantUser","relevantUser","isFetching","relationshipData","editDetailsButton","followed_username","CardActionArea","CardMedia","gutterBottom","format","FollowButton","userData","useFollowUnfollow","follow","unFollow","followButton","followUser","toUnfollowUsername","toFollowUsername","listItemStyle","Relevant","loading","WtfFollowButton","mainCard","container","WhoToFollow","useWhoToFollow","whoToFollows","whoToFollow","idx","ListItemAvatar","SideBar","AuthenticatedApp","useLocation","Grid","Hidden","xsDown","item","xs","sm","md","lg","Navigations","exact","path","LogIn","Register","pathname","smDown","smUp","NavigationBottom"],"mappings":"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","file":"static/js/6.b872915c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/color.d8e226a2.svg\";","module.exports = __webpack_public_path__ + \"static/media/black.453b122a.svg\";","module.exports = __webpack_public_path__ + \"static/media/fighter.d39f1b6a.svg\";","import React from \"react\";\nimport { useQuery, queryCache } from \"react-query\";\nimport { useClient } from \"./api-client\";\n\nconst config = {\n  staleTime: 1000 * 60 * 60,\n  cacheTime: 1000 * 60 * 60,\n};\n\nfunction useTweets(endPoint, dt) {\n  const client = useClient();\n  const data = useQuery({\n    queryKey: [\"tweets\"],\n    queryFn: () => client(endPoint, dt).then((data) => data),\n    ...config,\n  });\n  return data;\n}\n\n//useHomeTweets is  POST request even though there is no data arguemnt, by default 'client' will make a GET request if there is no second\n//data argument so we have to explicitly change Method to POST\nfunction useHomeTweets(endPoint) {\n  const client = useClient();\n  const data = useQuery({\n    queryKey: [\"HomeTweets\"],\n    queryFn: () => client(endPoint, { method: \"POST\" }).then((data) => data),\n    ...config,\n  });\n\n  return data;\n}\n\nexport { useTweets, useHomeTweets };\n","import React from \"react\";\nimport { useQuery, queryCache, useMutation } from \"react-query\";\nimport { useClient } from \"./api-client\";\n\nfunction useNotifications(endPoint) {\n  const client = useClient();\n\n  return useMutation((updates) =>\n    client(endPoint, { method: \"POST\", data: updates })\n  );\n}\n\nexport { useNotifications };\n","import React from \"react\";\n\n//mui\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport FavoriteBorder from \"@material-ui/icons/FavoriteBorder\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\n\n//query\nimport { useLike } from \"../utils/updaters\";\nimport { useHomeTweets } from \"../utils/tweets\";\nimport { useUser } from \"../utils/user\";\nimport { useNotifications } from \"../utils/notifications\";\n\n//===========================================\n\nexport function LikeButton(props) {\n  const loggedUser = useUser(\"user\");\n  const { data: followTweets } = useHomeTweets(\"followTweets\");\n  // const { likes } = followData;\n\n  const [like] = useLike(\"tweet/:tweetId/like\");\n  const [unlike] = useLike(\"tweet/:tweetId/unlike\");\n\n  const [postNotification] = useNotifications(\"notifications\");\n\n  //-------------------------------------------------\n\n  //props.tweetid is a map of the tweets on tweets.js,\n  //likedPost() checks state.likes which holds ALL the likes from this user\n  //from tweets.js tweets. e.g if this user has liked 2 tweets from all the tweets\n  //on tweets.js then we have to find if there is a 'hit'\n  function likedPost() {\n    if (followTweets !== undefined) {\n      if (!followTweets.likes.length) {\n        return;\n      }\n      let result = followTweets.likes.map((data) =>\n        data.tweetid === props.tweetId ? \"liked\" : null\n      );\n      if (result.find((x) => x === \"liked\")) {\n        return true;\n      }\n    }\n  }\n\n  let user = props.tweetUsername;\n  let postId = props.tweetId;\n\n  //markup\n  const likeButton = likedPost() ? (\n    <Tooltip\n      title=\"Undo like\"\n      onClick={() =>\n        unlike({\n          tweetId: props.tweetId,\n        })\n      }\n    >\n      <IconButton>\n        <FavoriteIcon />\n      </IconButton>\n    </Tooltip>\n  ) : (\n    <Tooltip\n      title=\"Like\"\n      onClick={() => {\n        like({\n          tweetId: props.tweetId,\n        });\n        postNotification({\n          sender: loggedUser.user.username,\n          recipient: user,\n          type: \"liked\",\n          tweetId: postId,\n        });\n      }}\n    >\n      <IconButton>\n        <FavoriteBorder />\n      </IconButton>\n    </Tooltip>\n  );\n\n  return likeButton;\n}\n","import React from \"react\";\nimport axios from \"axios\";\nimport dayjs from \"dayjs\";\nimport relativeTime from \"dayjs/plugin/relativeTime\";\n\n//contextAPI\nimport { UserContext } from \"../contextAPI/userContext\";\n\n//mui\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport ChatIcon from \"@material-ui/icons/ChatBubbleOutline\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\n\n//query\nimport { usePostComment } from \"../utils/updaters\";\nimport { useUser } from \"../utils/user\";\nimport { useNotifications } from \"../utils/notifications\";\n\n//----------------------\n\nconst useStyles = makeStyles((theme) => ({\n  dialogContainer: {\n    // display: \"flex\",\n    width: \"500px\",\n  },\n}));\n\n//==============================================================\n\nexport function Comments({ tweetId, tweetUsername }) {\n  const loggedUser = useUser(\"user\");\n\n  const [postComment] = usePostComment(\n    `tweet/${tweetUsername}/${tweetId}/${loggedUser.user.username}/comment`\n  );\n\n  const [postNotification] = useNotifications(\"notifications\");\n  //-------------------------------------------------------\n\n  const classes = useStyles();\n\n  //dayjs extesnsion plug\n  dayjs.extend(relativeTime);\n\n  //--contextAPI--------\n  const [state] = React.useContext(UserContext);\n\n  //local state\n  const [open, setOpen] = React.useState(false);\n  const [reply, setReply] = React.useState(\"\");\n\n  //eventHandlers\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  function handleReply(e) {\n    setReply(e.target.value);\n  }\n\n  //------------------------------------------\n\n  //axios postreply\n  // function handleComment() {\n  //   const postReply = async () => {\n  //     try {\n  //       await axios.post(\n  //         `https://socialmedia-server.herokuapp.com/tweet/${tweetUsername}/${tweetId}/${\n  //           state.loggedUser && state.loggedUser.username\n  //         }/comment`,\n  //         {\n  //           comment: reply,\n  //         }\n  //       );\n  //       console.log(\"posted reply\");\n  //       postNotification();\n  //     } catch {\n  //       console.log(\"cannot post reply\");\n  //     }\n  //   };\n  //   postReply();\n  //   handleClose();\n  // }\n\n  //postNotification\n  // function postNotification() {\n  //   const postData = async () => {\n  //     try {\n  //       await axios.post(\n  //         \"https://socialmedia-server.herokuapp.com/notifications\",\n  //         {\n  //           sender: state.loggedUser.username,\n  //           recipient: state.relevantUser[0].username,\n  //           type: \"commented\",\n  //           tweetId: tweetId,\n  //         }\n  //       );\n  //       console.log(\"posted notifications\");\n  //     } catch {\n  //       console.log(\"something went wrong\");\n  //     }\n  //   };\n\n  //   postData();\n  // }\n\n  //--------------------------------------\n  let user = tweetUsername;\n  let postId = tweetId;\n\n  //url for profilepic\n  const profilePic = `https://socialmedia-server.herokuapp.com/img/${\n    loggedUser.user.username\n  }? ${Date.now()}`;\n\n  //filteredTweets\n  let filteredTweets;\n  if (state.url[0]) {\n    loggedUser.user.username === tweetUsername\n      ? (filteredTweets = state.userTweets.filter(\n          (data) => data.id === parseInt(tweetId)\n        ))\n      : (filteredTweets = state.tweets.filter(\n          (data) => data.id === parseInt(tweetId)\n        ));\n  }\n\n  //markup\n  let markup;\n  if (state.url[0] && filteredTweets.length) {\n    markup = (\n      <Card className={classes.root}>\n        <CardHeader\n          avatar={\n            <Avatar>\n              <img\n                alt=\"\"\n                src={`https://socialmedia-server.herokuapp.com/img/${\n                  filteredTweets[0] && filteredTweets[0].username\n                }? ${Date.now()}`}\n                style={{ width: \"100%\", objectFit: \"cover\" }}\n              />\n            </Avatar>\n          }\n          title={filteredTweets[0].username}\n          subheader={dayjs(state.tweets[0].created_at).fromNow()}\n        />\n        <CardContent>\n          <Typography variant=\"h5\" color=\"textSecondary\" component=\"p\">\n            {filteredTweets[0].content}\n          </Typography>\n        </CardContent>\n        <CardActions disableSpacing></CardActions>\n      </Card>\n    );\n  }\n\n  //-------------------------------------------------\n\n  return (\n    <>\n      <IconButton aria-label=\"share\" onClick={handleClickOpen}>\n        <ChatIcon />\n      </IconButton>\n      <Dialog\n        fullWidth={true}\n        maxWidth={\"sm\"}\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"form-dialog-title\"></DialogTitle>\n\n        {markup}\n\n        <DialogContent>\n          <Avatar>\n            <img\n              alt=\"\"\n              src={profilePic ? profilePic : null}\n              style={{ width: \"100%\", objectFit: \"cover\" }}\n            />\n          </Avatar>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"text\"\n            type=\"text\"\n            fullWidth\n            placeholder=\"Tweet your reply\"\n            onChange={handleReply}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button\n            onClick={() => {\n              postComment({\n                comment: reply,\n              });\n              postNotification({\n                sender: loggedUser.user.username,\n                recipient: user,\n                type: \"commented\",\n                tweetId: postId,\n              });\n              handleClose();\n            }}\n            color=\"primary\"\n          >\n            Reply\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n}\n","import React from \"react\";\nimport { useQuery, queryCache } from \"react-query\";\nimport { useClient } from \"./api-client\";\n\nconst config = {\n  staleTime: 5000 * 60 * 60,\n  cacheTime: 5000 * 60 * 60,\n};\n\nfunction useImage(endPoint) {\n  //   const client = useClient();\n  const { data } = useQuery({\n    queryKey: \"Image\",\n    queryFn: () => endPoint,\n    ...config,\n  });\n  return data;\n}\n\nexport { useImage };\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport dayjs from \"dayjs\";\nimport relativeTime from \"dayjs/plugin/relativeTime\";\n\n//mui\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport Divider from \"@material-ui/core/Divider\";\n\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport { Card, CardContent, CardActions, CardHeader } from \"@material-ui/core\";\n\n//components\nimport { LikeButton } from \"./LikeButton\";\nimport { Comments } from \"./Comments\";\nimport { Container, Box } from \"@material-ui/core\";\n\n//query\nimport { useImage } from \"../utils/image\";\n//==========================================\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    // backgroundColor: theme.palette.background.paper,\n    backgroundColor: \"#f7f7f7\",\n    // height: \"180px\",\n  },\n  inline: {\n    display: \"inline\",\n  },\n  content: {\n    padding: 0,\n    paddingLeft: 16,\n    \"&:last-child\": {\n      paddingBottom: 0,\n    },\n  },\n}));\n\n//================================================================\n\nexport function Tweets({ data }) {\n  //This was needed as the shape of incoming props is different from 'HomeTweets' and 'UserProfile'\n  let tweets;\n  if (data !== undefined) {\n    if (data.tweets) {\n      tweets = data.tweets;\n    } else {\n      tweets = data;\n    }\n  }\n\n  //dayjs extesnsion plug\n  dayjs.extend(relativeTime);\n\n  //sort tweets by created_at\n  let orderedTweets;\n  if (tweets) {\n    orderedTweets = tweets.sort(function compare(a, b) {\n      var dateA = new Date(a.created_at);\n      var dateB = new Date(b.created_at);\n      return dateB - dateA;\n    });\n  }\n\n  let tweetsMarkup;\n\n  if (tweets) {\n    tweetsMarkup = orderedTweets.map((tweet) => (\n      <TweetsCard key={tweet.id} tweet={tweet} />\n    ));\n  } else {\n  }\n\n  return <div>{tweetsMarkup}</div>;\n}\n\n//=============================================================\n\n//TweetCard\nfunction TweetsCard({ tweet }) {\n  const classes = useStyles();\n\n  // const image = useImage(\n  //   `https://socialmedia-server.herokuapp.com/img/${tweet.username}`\n  // );\n\n  return (\n    <Card className={classes.root} key={tweet.id}>\n      <Link\n        to={`/${tweet.username}/${tweet.id}`}\n        style={{ textDecoration: \"none\", color: \"black\" }}\n        key={tweet.id}\n      >\n        <CardHeader\n          avatar={\n            <Avatar component=\"span\">\n              <img\n                alt=\"\"\n                src={`https://socialmedia-server.herokuapp.com/img/${tweet.username}`}\n                style={{ width: \"200%\", objectFit: \"fill\" }}\n              />\n            </Avatar>\n          }\n          title={\n            <Typography style={{ display: \"flex\", fontSize: \"1rem\" }}>\n              {tweet.username}\n            </Typography>\n          }\n          subheader={\n            <div style={{ display: \"flex\" }}>\n              <Typography style={{ marginRight: 5, fontSize: \"0.8rem\" }}>\n                {` @${tweet.username}`} -{\" \"}\n              </Typography>{\" \"}\n              <Typography style={{ fontSize: \"0.8rem\" }}>\n                {\" \"}\n                {dayjs(tweet.created_at).fromNow()}\n              </Typography>\n            </div>\n          }\n        />\n\n        <CardContent className={classes.content}>\n          <React.Fragment>\n            <Typography\n              variant=\"body2\"\n              className={classes.inline}\n              color=\"textPrimary\"\n            >\n              {tweet.content}\n            </Typography>\n          </React.Fragment>\n        </CardContent>\n      </Link>\n\n      <CardActions>\n        <React.Fragment>\n          <Container\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              marginLeft: \"-20px\",\n            }}\n          >\n            <Box>\n              {tweet.likescount}{\" \"}\n              <LikeButton\n                tweetId={tweet.id}\n                key={tweet.id}\n                tweet={tweet}\n                tweetUsername={tweet.username}\n              />\n            </Box>\n\n            <Box>\n              {tweet.commentcount}\n              <Comments\n                tweetId={tweet.id}\n                key={tweet.id}\n                tweet={tweet}\n                tweetUsername={tweet.username}\n              />\n            </Box>\n          </Container>\n        </React.Fragment>\n      </CardActions>\n\n      <Divider />\n    </Card>\n  );\n}\n","import React from \"react\";\n\n//components\nimport { Tweets } from \"./Tweets\";\n\n//query\nimport { useHomeTweets } from \"../utils/tweets\";\n\n//==========================================\n\nexport function HomeTweets() {\n  const { data, isLoading } = useHomeTweets(\"followTweets\");\n\n  if (data !== undefined) {\n    return (\n      <div style={{ paddingTop: \"10px\" }}>{<Tweets data={data.tweets} />}</div>\n    );\n  } else {\n    return null;\n  }\n}\n","import React from \"react\";\n\n//mui\nimport Avatar from \"@material-ui/core/Avatar\";\nimport { Container, ListItem } from \"@material-ui/core\";\nimport { Button } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\n\n//contextAPI\nimport { UserContext } from \"../contextAPI/userContext\";\n\n//query\nimport { usePostTweet } from \"../utils/updaters\";\nimport { useUser } from \"../utils/user\";\n\n//===========================================\n\nconst useStyles = makeStyles((theme) => ({\n  palette: {\n    primary: {\n      main: \"red\",\n    },\n  },\n  root: {\n    // display: \"flex\",\n    // flexWrap: \"wrap\",\n    height: \"100px\",\n  },\n  textField: {\n    marginTop: theme.spacing(3),\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: \"25ch\",\n  },\n  postButton: {\n    marginRight: \"-390px\",\n    marginTop: \"40px\",\n    padding: \"10px\",\n    [theme.breakpoints.down(\"xs\")]: {\n      // width: theme.spacing(8) + 1,\n      marginLeft: \"-100px\",\n      marginBottom: \"-10px\",\n      height: \"20px\",\n      fontSize: \"0.5rem\",\n    },\n    [theme.breakpoints.down(\"md\")]: {\n      // width: theme.spacing(8) + 1,\n      marginRight: \"-300px\",\n      fontSize: \"0.5rem\",\n    },\n  },\n}));\n\n//========================================\n\nexport function HomePostTweet() {\n  const [postTweet] = usePostTweet(\"postTweet\");\n  const loggedUser = useUser(\"user\");\n\n  console.log(loggedUser);\n\n  //--------------------------------\n  const classes = useStyles();\n\n  //context\n  const [state] = React.useContext(UserContext);\n\n  //local\n  const [tweet, setTweet] = React.useState(\"\");\n\n  //set tweet state\n  function handleTweet(e) {\n    setTweet(e.target.value);\n  }\n\n  function handleClear() {\n    setTweet(\"\");\n  }\n\n  return (\n    <div className={classes.root}>\n      <Container style={{ marginLeft: \"-24px\" }}>\n        <ListItem>\n          <Avatar component=\"span\">\n            <img\n              alt=\"\"\n              src={`https://socialmedia-server.herokuapp.com/img/${loggedUser.user.username}`}\n              style={{ width: \"150%\", objectFit: \"cover\" }}\n            />\n          </Avatar>\n          <TextField\n            id=\"standard-full-width\"\n            style={{ margin: 10 }}\n            placeholder=\"What's happening?\"\n            fullWidth\n            value={tweet}\n            onChange={handleTweet}\n          />\n          <Container\n            className={classes.postButton}\n            // style={{\n            //   marginRight: \"-390px\",\n            //   marginTop: \"40px\",\n            //   padding: \"10px\",\n            // }}\n          >\n            <Button\n              onClick={() => {\n                postTweet({\n                  content: tweet,\n                });\n                handleClear();\n              }}\n              color=\"primary\"\n              //   style={{ color: \"#87CEFA\" }}\n              variant=\"contained\"\n            >\n              Post\n            </Button>\n          </Container>\n        </ListItem>\n      </Container>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\n\n//components\nimport { HomeTweets } from \"./HomeTweets\";\nimport { HomePostTweet } from \"./HomePostTweet\";\nimport { Card } from \"@material-ui/core\";\nimport Divider from \"@material-ui/core/Divider\";\n\n//mui\nimport { Typography } from \"@material-ui/core\";\nimport IconButton from \"@material-ui/core/IconButton\";\n\n//home=========================================\nexport function Home() {\n  const paramsUser = useParams();\n\n  console.log(\"HOME\");\n  return (\n    <div style={{ paddingTop: \"10px\" }}>\n      <Card>\n        <Typography\n          variant=\"h2\"\n          style={{\n            fontSize: \"1.5rem\",\n            fontWeight: \"bold\",\n            paddingLeft: \"10px\",\n          }}\n        >\n          {\"Home\"}\n          <IconButton style={{ paddingLeft: \"450px\" }}>\n            <img\n              alt=\"\"\n              src={require(\"../assets/svg/fighter.svg\")}\n              // src=\"https://icons.iconarchive.com/icons/3xhumed/mega-games-pack-27/256/Street-Fighter-II-2-icon.png\"\n              style={{ width: \"50px\" }}\n            />\n          </IconButton>\n        </Typography>\n      </Card>\n      <Divider light={true} />\n      <Card>\n        <HomePostTweet />\n      </Card>\n      <HomeTweets />\n    </div>\n  );\n}\n","import React from \"react\";\nimport axios from \"axios\";\n// import { withRouter } from \"react-router\";\nimport { useHistory } from \"react-router-dom\";\n\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport DeleteOutlinedIcon from \"@material-ui/icons/DeleteOutlined\";\n\nexport function DeleteButton(props) {\n  //from react-router-dom\n  let history = useHistory();\n\n  let postId;\n  if (props.tweetId) {\n    postId = props.tweetId;\n  } else {\n    postId = props.currentTweetId;\n  }\n\n  //props.tweetid is a map of the tweets on tweets.js,\n  //likedPost() checks state.likes which holds ALL the likes from this user\n  //from tweets.js tweets. e.g if this user has liked 2 tweets from all the tweets\n  //on tweets.js then we have to find if there is a 'hit'\n  function DeletePost() {\n    const deletePost = async () => {\n      try {\n        await axios.post(\n          `https://socialmedia-server.herokuapp.com/tweet/${postId}`\n        );\n        // dispatch({ type: \"SET_USER\", payload: result.data.user });\n      } catch {\n        console.log(\"something went wrong\");\n      }\n    };\n\n    deletePost();\n\n    //reroute\n    history.push(\"/\");\n  }\n\n  const DeleteButton = (\n    <Tooltip title=\"delete\" onClick={DeletePost}>\n      <IconButton>\n        <DeleteOutlinedIcon />\n      </IconButton>\n    </Tooltip>\n  );\n\n  return DeleteButton;\n}\n","import React from \"react\";\nimport { useQuery, queryCache } from \"react-query\";\nimport { useClient } from \"./api-client\";\n\nconst config = {\n  staleTime: 1000 * 60 * 60,\n  cacheTime: 1000 * 60 * 60,\n};\n\nfunction useComments(endPoint) {\n  const client = useClient();\n  const data = useQuery({\n    queryKey: \"Comments\",\n    queryFn: () => client(endPoint).then((data) => data),\n    ...config,\n  });\n  return data;\n}\n\nexport { useComments };\n","import React from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport dayjs from \"dayjs\";\nimport relativeTime from \"dayjs/plugin/relativeTime\";\n\n//mui\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { red } from \"@material-ui/core/colors\";\n\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\n\n//components\nimport { LikeButton } from \"./LikeButton\";\nimport { Comments } from \"./Comments\";\nimport { DeleteButton } from \"./DeleteButton\";\nimport { Box } from \"@material-ui/core\";\n\n//lib\nimport { FullPageSpinner } from \"../utils/lib\";\nimport { Spinner } from \"../utils/lib\";\n\n//query\nimport { useUser } from \"../utils/user\";\nimport { useTweets, useHomeTweets } from \"../utils/tweets\";\nimport { useComments } from \"../utils/comments\";\nimport { useImage } from \"../utils/image\";\n\n//=========\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    maxWidth: 700,\n  },\n  media: {\n    height: 0,\n    paddingTop: \"56.25%\", // 16:9\n  },\n  expand: {\n    transform: \"rotate(0deg)\",\n    marginLeft: \"auto\",\n    transition: theme.transitions.create(\"transform\", {\n      duration: theme.transitions.duration.shortest,\n    }),\n  },\n  expandOpen: {\n    transform: \"rotate(180deg)\",\n  },\n  avatar: {\n    backgroundColor: red[500],\n  },\n}));\n//---------------------\n\nexport function TweetDetails(props) {\n  const { username: urlUser, tweetId } = useParams();\n\n  //query\n  const data = useUser(\"user\");\n  const { user, relationships, notifications } = data;\n\n  const { data: userTweets, isLoading } = useTweets(\"userTweets\");\n\n  const { data: followTweets } = useHomeTweets(\"followTweets\");\n  // const { tweets } = followTweets;\n\n  const { data: comments, isFetchedAfterMount } = useComments(\n    `comment/${urlUser}/${tweetId}`\n  );\n\n  const image = useImage(\n    `https://socialmedia-server.herokuapp.com/img/${urlUser}`\n  );\n  //------------------------------\n\n  const classes = useStyles();\n  //dayjs extesnsion plug\n  dayjs.extend(relativeTime);\n\n  //===========================================\n\n  //get tweetId from url\n  const currentTweetId = props.match.params.tweetId;\n\n  //get tweet username from url\n  const currentTweetUsername = props.match.params.username;\n\n  //filter the tweet in state-if the username in url matches the username in url state then filter userTweets not followTweet\n  //NOTE= props.match.params.tweetId is a STRING number and NOT an integer so must use 'parseINT' to turn to integer or '===' will fail\n\n  let tweetDetails;\n  if (!isLoading && followTweets) {\n    tweetDetails =\n      user.username === urlUser\n        ? userTweets.filter((data) => data.id === parseInt(tweetId))\n        : followTweets.tweets.filter((data) => data.id === parseInt(tweetId));\n  } else {\n    return null;\n  }\n\n  //url for profilepic\n  // const profilePic = `https://socialmedia-server.herokuapp.com/img/${urlUser}? ${Date.now()}`;\n\n  console.log(\"Tweetdetials-tweetDetails\", tweetDetails);\n  // console.log(\"Tweetdetials-tweets\", tweets);\n\n  // markup;\n  if (tweetDetails.length) {\n    tweetDetails = (\n      <Card className={classes.root}>\n        <CardHeader\n          avatar={\n            <Avatar>\n              <img\n                alt=\"\"\n                src={`https://socialmedia-server.herokuapp.com/img/${urlUser}`}\n                style={{ width: \"200%\", objectFit: \"fill\" }}\n              />\n            </Avatar>\n          }\n          title={`@${tweetDetails[0] && tweetDetails[0].username}`}\n          subheader={dayjs(\n            tweetDetails[0] && tweetDetails[0].created_at\n          ).fromNow()}\n        />\n        <CardContent>\n          <Typography variant=\"h5\" color=\"textSecondary\" component=\"p\">\n            {tweetDetails[0] && tweetDetails[0].content}\n          </Typography>\n        </CardContent>\n        <CardActions style={{ justifyContent: \"space-between\" }}>\n          <Box style={{ paddingLeft: \"20px\" }}>\n            {tweetDetails[0] && tweetDetails[0].likescount}\n            <LikeButton\n              tweetId={parseInt(currentTweetId)}\n              tweetUsername={urlUser}\n            />\n          </Box>\n          <Box>\n            {tweetDetails[0] && tweetDetails[0].commentcount}\n            <Comments\n              tweetId={parseInt(currentTweetId)}\n              tweetUsername={urlUser}\n            />\n          </Box>\n          <Box>\n            {currentTweetUsername === user.username ? (\n              <DeleteButton currentTweetId={currentTweetId} />\n            ) : null}\n          </Box>\n        </CardActions>\n      </Card>\n    );\n  } else if (tweetId === undefined) {\n    return (\n      <div>\n        <FullPageSpinner />\n        {/* <h3>Sorry no tweet found</h3> */}\n      </div>\n    );\n  } else {\n    return (\n      <div>\n        <FullPageSpinner />\n        {/* <h3>Sorry no tweet found</h3> */}\n      </div>\n    );\n  }\n\n  ///comments markup\n  let commentSection;\n  if (comments) {\n    commentSection = comments.map((comment) => (\n      <List className={classes.root} key={comment.id}>\n        <Card style={{ backgroundColor: \"#f7f7f7\" }}>\n          <ListItem alignItems=\"flex-start\">\n            <div style={{ paddingRight: \"15px\" }}>\n              <Avatar component=\"span\">\n                <img\n                  alt=\"\"\n                  src={`https://socialmedia-server.herokuapp.com/img/${comment.senderusername}`}\n                  style={{ width: \"200%\", objectFit: \"fill\" }}\n                />\n              </Avatar>{\" \"}\n            </div>\n            <ListItemText\n              primary={\n                <Link\n                  to={`/${comment.senderusername}`}\n                  style={{ textDecoration: \"none\", color: \"black\" }}\n                >\n                  {`@${comment.senderusername}`}{\" \"}\n                </Link>\n              }\n              secondary={\n                <React.Fragment>\n                  <Typography variant=\"body2\">\n                    {\"Replying to\"}\n                    <Link\n                      to={`/${urlUser}`}\n                      style={{ textDecoration: \"none\", color: \"#87CEFA\" }}\n                    >\n                      {\" \"}\n                      {urlUser}{\" \"}\n                    </Link>\n                  </Typography>\n                  <Typography\n                    component=\"span\"\n                    variant=\"body2\"\n                    className={classes.inline}\n                    color=\"textPrimary\"\n                  >\n                    {comment.comments}\n                  </Typography>\n                  <br />\n                  <Typography\n                    component=\"span\"\n                    variant=\"body3\"\n                    className={classes.inline}\n                    color=\"textPrimary\"\n                  >\n                    {dayjs(comment.created_at).fromNow()}\n                  </Typography>\n                  <br />\n                </React.Fragment>\n              }\n            />\n          </ListItem>\n        </Card>\n      </List>\n    ));\n  } else {\n    return (\n      <div>\n        <FullPageSpinner />\n        {/* <h3>Sorry no tweet found</h3> */}\n      </div>\n    );\n  }\n\n  if (!tweetDetails) {\n    return (\n      <div>\n        {/* <FullPageSpinner /> */}\n        <h3>Sorry no tweet found</h3>\n      </div>\n    );\n  }\n\n  if (tweetDetails) {\n    return (\n      <>\n        <div>{tweetDetails}</div>\n        <div>{isFetchedAfterMount ? commentSection : <FullPageSpinner />}</div>\n      </>\n    );\n  }\n}\n","import React from \"react\";\nimport axios from \"axios\";\n\n//contextAPI\nimport { UserContext } from \"../contextAPI/userContext\";\n\n//mui\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport { Container, Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\n//query\nimport { useUpload } from \"../utils/uploadImage\";\nimport { useEditDetails } from \"../utils/updaters\";\n\n//------------------------------------------------------\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n  },\n  editProfile: {\n    overflowY: \"hidden\",\n    marginLeft: \"300px\",\n    [theme.breakpoints.down(\"md\")]: {\n      marginLeft: \"25px\",\n      fontSize: \"0.5rem\",\n    },\n  },\n}));\n\n//================================================\n\nexport function EditProfile({ user, image }) {\n  const [uploadImage] = useUpload(\"upload\");\n\n  const [editDetails] = useEditDetails(\"editDetails\");\n\n  //===============================\n  //mui\n  const classes = useStyles();\n\n  const [open, setOpen] = React.useState(false);\n\n  //--contextAPI--------\n  const [state, dispatch] = React.useContext(UserContext);\n\n  //local state form\n  const [bio, setBio] = React.useState(\"\");\n  const [website, setWebsite] = React.useState(\"\");\n  const [location, setLocation] = React.useState(\"\");\n\n  //open dialog box\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  //close dialogue box\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  //set default values to state, if not form will overwrite previous if not input\n  React.useEffect(() => {\n    setBio(user.bio);\n    setWebsite(user.website);\n    setLocation(user.location);\n  }, [user.bio, user.location, user.website]);\n\n  //event handlers--------\n\n  //handleBio\n  function handleBio(event) {\n    setBio(event.target.value);\n  }\n  //handleBio\n  function handleWebsite(event) {\n    setWebsite(event.target.value);\n  }\n  //handleBio\n  function handleLocation(event) {\n    setLocation(event.target.value);\n  }\n\n  function handleSubmitForm() {\n    setOpen(false);\n  }\n\n  //opens hidden image input using tooltip\n  function handleEditPicture() {\n    const fileInput = document.getElementById(\"imageInput\");\n    fileInput.click();\n  }\n\n  //submit Image change\n  function handleImageChange(event) {\n    const image = event.target.files[0];\n\n    const formData = new FormData();\n    formData.append(\"image\", image);\n\n    uploadImage(formData);\n  }\n\n  //------------------------\n\n  return (\n    <Container>\n      <Button\n        className={classes.editProfile}\n        variant=\"outlined\"\n        color=\"primary\"\n        onClick={handleClickOpen}\n        style={{ width: \"200px\" }}\n        component=\"span\"\n      >\n        <Typography style={{ fontWeight: 800, fontSize: \"0.9rem\" }}>\n          Edit details\n        </Typography>\n      </Button>\n      <Dialog\n        fullWidth={true}\n        maxWidth={\"sm\"}\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"form-dialog-title\">Edit details</DialogTitle>\n        <DialogContent>\n          <div className=\"image-wrapper\">\n            <Avatar component=\"span\">\n              <img\n                alt=\"\"\n                src={image}\n                style={{ width: \"150%\", objectFit: \"cover\" }}\n              />\n            </Avatar>{\" \"}\n            <input\n              type=\"file\"\n              name=\"pic\"\n              id=\"imageInput\"\n              hidden=\"hidden\"\n              onChange={handleImageChange}\n            />\n            <Tooltip title=\"Edit profile picture\" placement=\"top\">\n              <IconButton\n                onClick={handleEditPicture}\n                className=\"button\"\n                component=\"span\"\n              >\n                <EditIcon color=\"primary\" />\n              </IconButton>\n            </Tooltip>\n          </div>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"bio\"\n            label=\"Bio\"\n            type=\"email\"\n            fullWidth\n            defaultValue={user.bio}\n            style={{ paddingTop: \"20px\" }}\n            onChange={handleBio}\n          />\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"location\"\n            label=\"Location\"\n            type=\"text\"\n            fullWidth\n            defaultValue={user.location}\n            style={{ paddingTop: \"20px\" }}\n            onChange={handleLocation}\n          />\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"website\"\n            label=\"Website\"\n            type=\"text\"\n            fullWidth\n            defaultValue={user.website}\n            style={{ paddingTop: \"20px\" }}\n            onChange={handleWebsite}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button\n            onClick={() => {\n              editDetails({\n                bio: bio,\n                website: website,\n                location: location,\n              });\n              handleSubmitForm();\n            }}\n            color=\"primary\"\n          >\n            save\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Container>\n  );\n}\n","import React from \"react\";\nimport { useQuery, queryCache, useMutation } from \"react-query\";\nimport { useClient } from \"./api-client\";\n\nconst config = {\n  staleTime: 1000 * 60 * 60,\n  cacheTime: 1000 * 60 * 60,\n};\n\nfunction useUpload(endPoint) {\n  let token = localStorage.jwt;\n  token = `Bearer ${token}`;\n  return useMutation(\n    (updates) =>\n      window\n        .fetch(`https://socialmedia-server.herokuapp.com/${endPoint}`, {\n          method: \"POST\",\n          body: updates,\n          headers: {\n            Authorization: token ? token : undefined,\n          },\n        })\n        .then((data) => data),\n    {\n      onSettled: () => {\n        queryCache.invalidateQueries(\"Image\");\n      },\n    }\n  );\n}\n\n// function useUpload(endPoint) {\n//   let token = localStorage.jwt;\n//   token = `Bearer ${token}`;\n//   return useQuery(\n//     \"profilePic\",\n//     (updates) =>\n//       window.fetch(`https://socialmedia-server.herokuapp.com/${endPoint}`, {\n//         method: \"POST\",\n//         body: updates,\n//         headers: {\n//           Authorization: token ? token : undefined,\n//         },\n//       })\n//     //   .then(async (response) => {\n//     //     if (response.status === 401) {\n//     //       queryCache.clear();\n//     //       // await useHandlelogOut();\n//     //       // refresh the page for them\n//     //       window.location.assign(window.location);\n//     //       return Promise.reject({ message: \"Please re-authenticate.\" });\n//     //     }\n//     //     const data = await response.json();\n//     //     if (response.ok) {\n//     //       return data;\n//     //     } else {\n//     //       return Promise.reject(data);\n//     //     }\n//     //   })\n//   );\n// }\n\nexport { useUpload };\n","import React from \"react\";\nimport dayjs from \"dayjs\";\n\nimport { useParams } from \"react-router-dom\";\n//contextAPI\nimport { UserContext } from \"../contextAPI/userContext\";\n\n//mui\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport LocationIcon from \"@material-ui/icons/LocationOnOutlined\";\nimport DateIcon from \"@material-ui/icons/DateRangeOutlined\";\nimport IconButton from \"@material-ui/core/IconButton\";\n\n//components\nimport { Tweets } from \"./Tweets\";\nimport { EditProfile } from \"./EditProfile\";\nimport { Container } from \"@material-ui/core\";\n\n//utils/hooks\nimport { useClient } from \"../utils/api-client\";\n\n//query\nimport { useImage } from \"../utils/image\";\nimport { useTweets } from \"../utils/tweets\";\nimport { useRelevantUser } from \"../utils/user\";\nimport { useUser } from \"../utils/user\";\nimport { FullPageSpinner } from \"../utils/lib\";\n//--------------------------------------------------------\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 700,\n  },\n  media: {\n    height: 240,\n    // backgroundSize: \"contain\",\n  },\n});\n\n//UserProfile=================================================\nexport function UserProfile(props) {\n  console.log(\"UserProfile\");\n  const { username: urlUser } = useParams();\n\n  const client = useClient();\n\n  const user = useUser(\"user\");\n  const { user: currentUser } = user;\n\n  const { data: relevantTweets } = useTweets(\"relevantTweets\", {\n    data: { relevantUsername: props.match.params.username },\n  });\n\n  const { data: relevantUser, isLoading, isFetching } = useRelevantUser(\n    \"relevantUser\",\n    {\n      data: { relevantUsername: urlUser },\n    }\n  );\n\n  const { data: relationshipData } = useRelevantUser(\"relevantRelationships\", {\n    data: { relevantUser: props.match.params.username },\n  });\n\n  //image\n  const image = useImage(\n    `https://socialmedia-server.herokuapp.com/img/${urlUser}`\n  );\n\n  //-----------------------------------------------\n\n  const classes = useStyles();\n  //--contextAPI--------\n  const [state] = React.useContext(UserContext);\n\n  //====================================\n\n  //editProfile button check-----\n  let editDetailsButton =\n    currentUser.username === urlUser ? (\n      <EditProfile user={currentUser} image={image} />\n    ) : null;\n\n  //follower and follow check----------\n  let followers;\n  let following;\n\n  if (relationshipData) {\n    followers = relationshipData.filter((x) => x.followed_username === urlUser)\n      .length;\n    following = relationshipData.filter((x) => x.followed_username !== urlUser)\n      .length;\n  }\n\n  //--------------------------------------\n\n  //markup\n  let markup;\n  if (relevantUser !== undefined && !isLoading) {\n    markup = (\n      <Card className={classes.root} key={state}>\n        <CardActionArea>\n          <CardMedia\n            key={state}\n            className={classes.media}\n            image={`https://socialmedia-server.herokuapp.com/img/${relevantUser.username}`}\n            title=\"user img\"\n          />\n          <CardContent>\n            <Container>{editDetailsButton}</Container>\n\n            <Avatar component=\"span\">\n              <img\n                alt=\"\"\n                src={`https://socialmedia-server.herokuapp.com/img/${relevantUser.username}`}\n                style={{ width: \"200%\", objectFit: \"fill\" }}\n              />\n            </Avatar>\n            {/* <Avatar src={profilePic} /> */}\n            <Typography gutterBottom variant=\"h5\" component=\"h2\">\n              {relevantUser.username}\n            </Typography>\n            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n              {relevantUser.bio}\n            </Typography>\n\n            <IconButton\n              aria-label=\"location\"\n              style={{ paddingLeft: \"0\", marginLeft: \"-5px\" }}\n              component=\"span\"\n            >\n              <LocationIcon />\n              <Typography\n                variant=\"body2\"\n                color=\"textSecondary\"\n                component=\"p\"\n                style={{ paddingLeft: \"5px\" }}\n              >\n                {relevantUser.location}\n              </Typography>\n            </IconButton>\n            <IconButton aria-label=\"joined\" component=\"span\">\n              <DateIcon />\n              <Typography\n                variant=\"body2\"\n                color=\"textSecondary\"\n                component=\"p\"\n                style={{ paddingLeft: \"5px\" }}\n              >\n                Joined {dayjs(relevantUser.created_at).format(\"DD/MM/YYYY\")}\n              </Typography>\n            </IconButton>\n            <br />\n            <Typography\n              variant=\"body2\"\n              color=\"textSecondary\"\n              component=\"p\"\n              style={{ display: \"inline-block\" }}\n            >\n              {followers} {followers > 1 ? \"Followers\" : \"Follower\"}\n            </Typography>\n            <Typography\n              variant=\"body2\"\n              color=\"textSecondary\"\n              component=\"p\"\n              style={{ display: \"inline-block\", paddingLeft: \"30px\" }}\n            >\n              {following} Following\n            </Typography>\n          </CardContent>\n        </CardActionArea>\n\n        <div>{<Tweets data={relevantTweets} />}</div>\n      </Card>\n    );\n  } else {\n    markup = <FullPageSpinner />;\n  }\n\n  return (\n    <div>\n      {!isFetching && relevantTweets ? (\n        <Container>\n          <Typography variant=\"h4\" style={{ paddingLeft: \"30px\" }}>\n            {relevantUser?.username}\n          </Typography>\n          <Typography style={{ paddingLeft: \"30px\" }}>\n            {relevantTweets?.length}{\" \"}\n            {relevantTweets?.length > 1 ? \"tweets\" : \"tweet\"}\n          </Typography>\n          {markup}\n        </Container>\n      ) : (\n        <FullPageSpinner />\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport axios from \"axios\";\n\n//contextAPI\nimport { UserContext } from \"../contextAPI/userContext\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\n\n//query\n//query\nimport { useFollowUnfollow } from \"../utils/updaters\";\nimport { useNotifications } from \"../utils/notifications\";\n\n//===============================================\n\nexport function FollowButton({ userData, relevantUser }) {\n  const [follow] = useFollowUnfollow(\"follow\");\n  const [unFollow] = useFollowUnfollow(\"unFollow\");\n  const [postNotification] = useNotifications(\"notifications\");\n\n  console.log(\"WhoToFollowButton\", userData);\n\n  //check if logged user is following this users profile, if yes color icon, no is black\n  function followUser() {\n    if (!userData.relationships) {\n      return;\n    }\n    let following = userData.relationships.map((data) =>\n      data.followed_username === relevantUser.username ? \"following\" : null\n    );\n\n    if (following.find((x) => x === \"following\")) {\n      return true;\n    }\n  }\n\n  const followButton = followUser() ? (\n    <Tooltip\n      title=\"unfollow\"\n      onClick={() => {\n        unFollow({\n          toUnfollowUsername: relevantUser.username,\n        });\n      }}\n    >\n      <IconButton>\n        <img\n          alt=\"\"\n          src={require(\"../assets/svg/color.svg\")}\n          style={{ width: \"30px\" }}\n        />\n      </IconButton>\n    </Tooltip>\n  ) : (\n    <Tooltip\n      title=\"follow\"\n      onClick={() => {\n        follow({\n          toFollowUsername: relevantUser.username,\n        });\n        postNotification({\n          sender: userData.user.username,\n          recipient: relevantUser.username,\n          type: \"followed\",\n        });\n      }}\n    >\n      <IconButton>\n        <img\n          alt=\"\"\n          src={require(\"../assets/svg/black.svg\")}\n          style={{ width: \"30px\" }}\n        />\n      </IconButton>\n    </Tooltip>\n  );\n\n  return <div>{followButton}</div>;\n}\n","import React from \"react\";\nimport axios from \"axios\";\nimport { Link } from \"react-router-dom\";\n\n//contextAPI\nimport { UserContext } from \"../contextAPI/userContext\";\n\n//mui\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Divider from \"@material-ui/core/Divider\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Card from \"@material-ui/core/Card\";\n\n//components\nimport { FollowButton } from \"./FollowButton\";\n\n//utils/hooks\nimport { useClient } from \"../utils/api-client\";\n\n//query\nimport { useFollowUnfollow } from \"../utils/updaters\";\nimport { useRelevantUser } from \"../utils/user\";\n\n//=====================================\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: \"170px\",\n    width: \"100%\",\n    backgroundColor: \"#f7f7f7\",\n  },\n  inline: {\n    display: \"inline\",\n  },\n  listItemStyle: {\n    maxWidth: \"320px\",\n  },\n}));\n\n//=========================================\n\nexport function Relevant({ userData, urlUser }) {\n  const { data: relevantUser, isLoading } = useRelevantUser(\"relevantUser\", {\n    data: { relevantUsername: urlUser },\n  });\n\n  const classes = useStyles();\n  const client = useClient();\n\n  //--contextAPI--------\n  const [state, dispatch] = React.useContext(UserContext);\n\n  //local (prevent dom loading until state updated)\n  const [loading, setLoading] = React.useState(false);\n\n  //markup\n  let markup;\n  if (relevantUser !== undefined) {\n    markup = (\n      <Card className={classes.root}>\n        <List>\n          <div style={{ paddingBottom: `10px` }}>\n            <Typography\n              component=\"span\"\n              variant=\"h5\"\n              className={classes.inline}\n              color=\"textPrimary\"\n              style={{\n                marginLeft: \"80px\",\n                fontWeight: \"bold\",\n              }}\n            >\n              {\" \"}\n              Relevant people\n            </Typography>\n          </div>\n\n          <Divider variant=\"fullWidth\" component=\"li\" />\n\n          <ListItem alignItems=\"flex-start\" style={{ paddingTop: \"10px\" }}>\n            <div style={{ paddingRight: \"15px\", paddingTop: \"6px\" }}>\n              <Avatar component=\"span\">\n                <img\n                  alt=\"\"\n                  src={`https://socialmedia-server.herokuapp.com/img/${urlUser}`}\n                  style={{ width: \"200%\", objectFit: \"fill\" }}\n                />\n              </Avatar>{\" \"}\n            </div>\n            <Link\n              to={`/${relevantUser.username}`}\n              style={{ textDecoration: \"none\", color: \"black\" }}\n            >\n              <ListItemText\n                // className={classes.listItem}\n                secondary={\n                  <React.Fragment>\n                    <Typography\n                      component=\"span\"\n                      variant=\"h5\"\n                      className={classes.inline}\n                      color=\"textPrimary\"\n                    >\n                      @{relevantUser.username}\n                    </Typography>\n                    <br />\n                    <Typography\n                      component=\"span\"\n                      variant=\"body2\"\n                      className={classes.inline}\n                      color=\"textPrimary\"\n                      // style={{ fontSize: \"0.8rem\" }}\n                    >\n                      {relevantUser.bio}\n                    </Typography>\n                  </React.Fragment>\n                }\n              />\n            </Link>\n            {userData.user.username === urlUser ? null : (\n              <FollowButton userData={userData} relevantUser={relevantUser} />\n            )}\n            {/* <FollowButton userData={userData} relevantUser={relevantUser} /> */}\n          </ListItem>\n        </List>\n      </Card>\n    );\n  }\n\n  return <div>{!loading ? markup : null}</div>;\n}\n","import React from \"react\";\nimport axios from \"axios\";\n\n//contextAPI\nimport { UserContext } from \"../contextAPI/userContext\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\n\n//query\nimport { useFollowUnfollow } from \"../utils/updaters\";\nimport { useNotifications } from \"../utils/notifications\";\n\n//============================================\n\nexport function WtfFollowButton({ userData, ...props }) {\n  const [follow] = useFollowUnfollow(\"follow\");\n  const [unFollow] = useFollowUnfollow(\"unFollow\");\n  const [postNotification] = useNotifications(\"notifications\");\n\n  console.log(\"WhoToFollowButton\", userData);\n\n  //check if logged user is following this users profile, if yes color icon, no is black\n  function followUser() {\n    if (!userData.relationships) {\n      return;\n    }\n    let following = userData.relationships.map((data) =>\n      data.followed_username === props.username ? \"following\" : null\n    );\n\n    if (following.find((x) => x === \"following\")) {\n      return true;\n    }\n  }\n\n  const followButton = followUser() ? (\n    <Tooltip\n      title=\"unfollow\"\n      onClick={() => {\n        unFollow({\n          toUnfollowUsername: props.username,\n        });\n      }}\n    >\n      <IconButton>\n        <img\n          alt=\"\"\n          src={require(\"../assets/svg/color.svg\")}\n          style={{ width: \"30px\" }}\n        />\n      </IconButton>\n    </Tooltip>\n  ) : (\n    <Tooltip\n      title=\"follow\"\n      onClick={() => {\n        follow({\n          toFollowUsername: props.username,\n        });\n        postNotification({\n          sender: userData.user.username,\n          recipient: props.username,\n          type: \"followed\",\n        });\n      }}\n    >\n      <IconButton>\n        <img\n          alt=\"\"\n          src={require(\"../assets/svg/black.svg\")}\n          style={{ width: \"30px\" }}\n        />\n      </IconButton>\n    </Tooltip>\n  );\n\n  return <div>{followButton}</div>;\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\n//mui\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Divider from \"@material-ui/core/Divider\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Card from \"@material-ui/core/Card\";\n\n//components\nimport { WtfFollowButton } from \"./whoToFollowFollowButton\";\n\n//query\nimport { useWhoToFollow } from \"../utils/user\";\nimport { FullPageSpinner } from \"../utils/lib\";\n\n//=====================================\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    // width: \"350px\",\n    // maxWidth: \"100%\",\n    // backgroundColor: theme.palette.background.paper,\n    backgroundColor: \"#f7f7f7\",\n  },\n  inline: {\n    display: \"inline\",\n    backgroundColor: \"#f7f7f7\",\n  },\n  mainCard: {\n    height: \"140px\",\n    backgroundColor: \"#f7f7f7\",\n  },\n  container: { backgroundColor: \"#f7f7f7\", width: \"350px\" },\n}));\n\n//=========================================\n\nexport function WhoToFollow({ userData }) {\n  const { data: whoToFollows, isLoading, isFetching } = useWhoToFollow(\n    \"whoToFollow\"\n  );\n  console.log(\"WhoToFollow\", whoToFollows);\n\n  const classes = useStyles();\n\n  //local (prevent dom loading until state updated)\n  const [loading] = React.useState(false);\n\n  //markup\n  let whoToFollow;\n  if (whoToFollows && !isFetching) {\n    whoToFollow = whoToFollows.map((user, idx) => (\n      <Card className={classes.mainCard} key={idx}>\n        <List className={classes.root}>\n          <Divider variant=\"fullWidth\" component=\"li\" />\n\n          <ListItem alignItems=\"flex-start\">\n            <ListItemAvatar>\n              <Avatar component=\"span\">\n                <img\n                  alt=\"\"\n                  src={`https://socialmedia-server.herokuapp.com/img/${\n                    user.username\n                  }? ${Date.now()}`}\n                  style={{ width: \"200%\", objectFit: \"fill\" }}\n                />\n              </Avatar>\n            </ListItemAvatar>\n            <Link to={`/${user.username}`} style={{ textDecoration: \"none\" }}>\n              <ListItemText\n                //   primary={state.relevantUser[0] && state.relevantUser[0].username}\n                secondary={\n                  <React.Fragment>\n                    <Typography\n                      component=\"span\"\n                      variant=\"h5\"\n                      className={classes.inline}\n                      color=\"textPrimary\"\n                    >\n                      @{user.username}\n                    </Typography>\n                    <br />\n                    <Typography\n                      component=\"span\"\n                      variant=\"body2\"\n                      className={classes.inline}\n                      color=\"textPrimary\"\n                    >\n                      {user.bio}\n                    </Typography>\n                  </React.Fragment>\n                }\n              />\n            </Link>\n            <WtfFollowButton username={user.username} userData={userData} />\n          </ListItem>\n        </List>\n      </Card>\n    ));\n  } else {\n    return (\n      <div>\n        {\" \"}\n        <FullPageSpinner />\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      {!loading ? (\n        <Card className={classes.container}>\n          <Typography\n            component=\"span\"\n            variant=\"h5\"\n            className={classes.inline}\n            color=\"textPrimary\"\n            style={{\n              marginLeft: \"90px\",\n              fontWeight: \"bold\",\n            }}\n          >\n            {\" \"}\n            Who to follow\n          </Typography>\n          {whoToFollow}\n        </Card>\n      ) : null}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { FullPageSpinner } from \"../utils/lib\";\n\n//components\nimport { Relevant } from \"./Relevant\";\nimport { WhoToFollow } from \"./WhoToFollow\";\n\n//==================================================================\nexport function SideBar({ user }) {\n  const { username: urlUser } = useParams();\n\n  console.log(\"Sidebar,\", user);\n\n  if (user) {\n    return (\n      <div style={{ paddingTop: \"10px\", width: \"350px\", paddingLeft: \"35px\" }}>\n        {!urlUser ? (\n          <WhoToFollow userData={user} />\n        ) : urlUser !== user.username ? (\n          <Relevant userData={user} urlUser={urlUser} />\n        ) : (\n          <WhoToFollow userData={user} />\n        )}\n      </div>\n    );\n  } else {\n    return (\n      <div>\n        <FullPageSpinner />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport axios from \"axios\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  useLocation,\n} from \"react-router-dom\";\n\n//contextAPI\nimport { UserContext } from \"./contextAPI/userContext\";\n\n//components\nimport { Home } from \"./components/Home\";\nimport { LogIn } from \"./components/Login\";\nimport { TweetDetails } from \"./components/TweetDetails\";\nimport { Navigations } from \"./components/Navigations\";\nimport { UserProfile } from \"./components/UserProfile\";\nimport { SideBar } from \"./components/SideBar\";\nimport { Register } from \"./components/Register\";\nimport { NavigationBottom } from \"./components/NavigationBottom\";\n\n//mui\nimport Grid from \"@material-ui/core/Grid\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport Container from \"@material-ui/core/Container\";\n\n//utils/hooks\nimport { useClient } from \"./utils/api-client\";\n\n//query\nimport { useUser } from \"./utils/user\";\nimport { useHomeTweets } from \"./utils/tweets\";\n\n//-------------------------------------------------\n\nfunction AuthenticatedApp() {\n  const location = useLocation();\n\n  const user = useUser(\"user\");\n  //   const data = useHomeTweets(\"followTweets\");\n\n  console.log(\"Authenticatedapp-user\", user);\n\n  //responsive dewsign notes-- Double grid design, main grid split in 2 with navigation and main section,\n  //navigation has another grid system with 3grids nested to get good alignment (to the right) when shrinking viewport.\n  //navigation.js also has responsive layout to hide text at breakpoint.\n  return (\n    <div className=\"App\">\n      <Container>\n        <Grid container spacing={3}>\n          <Hidden xsDown>\n            <Grid item xs={false} sm={2} md={2} lg={3}>\n              <Container>\n                <Grid container>\n                  <Grid item sm={4}></Grid>\n                  <Grid item sm={4}></Grid>\n                  <Grid item sm={4} lg={12} style={{ paddingRight: \"20px\" }}>\n                    <Navigations />\n                  </Grid>\n                </Grid>\n              </Container>\n            </Grid>\n          </Hidden>\n\n          <Grid item xs={12} sm={10} md={10} lg={9}>\n            <Grid container spacing={3}>\n              <Grid item xs={12} sm={12} md={8} lg={8}>\n                <Switch>\n                  <Route exact path=\"/\" component={Home} />\n                  <Route exact path=\"/login\" component={LogIn} />\n                  <Route exact path=\"/register\" component={Register} />\n                  <Route\n                    exact\n                    path=\"/:username/:tweetId\"\n                    component={TweetDetails}\n                  />\n                  <Route\n                    exact\n                    path=\"/:username\"\n                    component={UserProfile}\n                    key={location.pathname}\n                  />\n                </Switch>\n              </Grid>\n\n              <Hidden smDown>\n                <Grid item sm={false} md={4} lg={4}>\n                  <Route exact path={[\"/:username\", \"/:username/:id\", \"/\"]}>\n                    <SideBar user={user} />\n                  </Route>\n                </Grid>\n              </Hidden>\n            </Grid>\n          </Grid>\n          <Hidden smUp>\n            <NavigationBottom />\n          </Hidden>\n        </Grid>\n      </Container>\n    </div>\n  );\n}\n\nexport default AuthenticatedApp;\n"],"sourceRoot":""}